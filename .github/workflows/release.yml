name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write  # For PyPI trusted publishing

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    steps:
    - uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Check if prerelease
      id: check_prerelease
      run: |
        if [[ "${{ steps.get_version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          if [[ "${{ steps.get_version.outputs.version }}" =~ -[a-zA-Z] ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Invalid version format"
          exit 1
        fi

  test:
    runs-on: ubuntu-latest
    needs: validate-tag
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest pytest-cov

    - name: Run tests
      run: pytest tests/ -v

  build:
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Verify version consistency
      run: |
        TAG_VERSION="${{ needs.validate-tag.outputs.version }}"
        PACKAGE_VERSION=$(python -c "import puter; print(puter.__version__)")

        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version mismatch: tag=$TAG_VERSION, package=$PACKAGE_VERSION"
          exit 1
        fi
        echo "Version verification passed: $TAG_VERSION"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ needs.validate-tag.outputs.version }}
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    needs: validate-tag
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .

    - name: Run security checks
      run: |
        safety check
        bandit -r puter/ -f txt

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-tag, test, build, security-scan]
    environment: release
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.validate-tag.outputs.version }}
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-tag, test, build, security-scan]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ needs.validate-tag.outputs.version }}
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          sed -n "/## \[${{ needs.validate-tag.outputs.version }}\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md

          # If changelog is empty, create a default one
          if [ ! -s release_notes.md ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            echo "See the full [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details." >> release_notes.md
          fi
        else
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "Release ${{ needs.validate-tag.outputs.version }}" >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-tag.outputs.version }}
        name: Release v${{ needs.validate-tag.outputs.version }}
        body_path: release_notes.md
        files: dist/*
        prerelease: ${{ needs.validate-tag.outputs.is_prerelease == 'true' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-pypi, create-github-release]
    if: always()
    steps:
    - name: Notify on success
      if: needs.publish-pypi.result == 'success' && needs.create-github-release.result == 'success'
      run: |
        echo "🎉 Release v${{ needs.validate-tag.outputs.version }} completed successfully!"
        echo "📦 PyPI: https://pypi.org/project/puter-python-sdk/${{ needs.validate-tag.outputs.version }}/"
        echo "🏷️  GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-tag.outputs.version }}"

    - name: Notify on failure
      if: needs.publish-pypi.result == 'failure' || needs.create-github-release.result == 'failure'
      run: |
        echo "❌ Release v${{ needs.validate-tag.outputs.version }} failed!"
        echo "Please check the workflow logs for details."
