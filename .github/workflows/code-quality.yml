name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=puter --cov-report=xml --cov-report=html
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  complexity-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install complexity tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon mccabe
    
    - name: Run complexity analysis
      run: |
        echo "## Cyclomatic Complexity Report" > complexity-report.md
        echo "" >> complexity-report.md
        
        echo "### Radon Complexity Analysis" >> complexity-report.md
        radon cc puter/ -a -nc >> complexity-report.md || true
        
        echo "" >> complexity-report.md
        echo "### Maintainability Index" >> complexity-report.md
        radon mi puter/ -nc >> complexity-report.md || true
        
        echo "" >> complexity-report.md
        echo "### Raw Metrics" >> complexity-report.md
        radon raw puter/ >> complexity-report.md || true
    
    - name: Check complexity thresholds
      run: |
        # Fail if average complexity is too high
        xenon --max-average=B --max-modules=B --max-absolute=B puter/
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-report
        path: complexity-report.md

  code-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest pytest-cov coverage[toml]
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest tests/
        coverage report --show-missing
        coverage xml
        coverage html
    
    - name: Coverage comment
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  documentation-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pydocstyle docstring-coverage interrogate
    
    - name: Check docstring style
      run: |
        pydocstyle puter/ --convention=google
    
    - name: Check docstring coverage
      run: |
        docstring-coverage puter/ --badge=docs/docstring-coverage.svg
        interrogate puter/ -v --ignore-init-method --ignore-init-module
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-quality
        path: docs/docstring-coverage.svg

  performance-benchmarks:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-benchmark memory-profiler
    
    - name: Run performance benchmarks
      run: |
        # Create benchmark tests if they don't exist
        mkdir -p tests/benchmarks
        
        # Run benchmark tests (will skip if no benchmark tests exist)
        pytest tests/benchmarks/ --benchmark-json=benchmark-results.json || echo "No benchmark tests found"
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.json

  type-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install mypy monkeytype
    
    - name: Run type checking with coverage
      run: |
        # Generate type coverage report
        mypy puter/ --html-report=mypy-report --any-exprs-report=mypy-any-report || true
    
    - name: Upload type checking reports
      uses: actions/upload-artifact@v4
      with:
        name: type-checking-reports
        path: |
          mypy-report/
          mypy-any-report/

  code-quality-summary:
    runs-on: ubuntu-latest
    needs: [complexity-analysis, code-coverage, documentation-quality, type-coverage]
    if: always() && github.event_name == 'pull_request'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate quality summary
      run: |
        echo "# 📊 Code Quality Summary" > quality-summary.md
        echo "" >> quality-summary.md
        echo "This is an automated code quality report for this pull request." >> quality-summary.md
        echo "" >> quality-summary.md
        
        echo "## 🎯 Quality Metrics" >> quality-summary.md
        echo "" >> quality-summary.md
        echo "| Metric | Status | Details |" >> quality-summary.md
        echo "|--------|--------|---------|" >> quality-summary.md
        
        # Add status for each job
        echo "| Complexity Analysis | ${{ needs.complexity-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} | Check complexity artifacts |" >> quality-summary.md
        echo "| Code Coverage | ${{ needs.code-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} | Check coverage artifacts |" >> quality-summary.md
        echo "| Documentation Quality | ${{ needs.documentation-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} | Check docstring coverage |" >> quality-summary.md
        echo "| Type Coverage | ${{ needs.type-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} | Check type checking reports |" >> quality-summary.md
        
        echo "" >> quality-summary.md
        echo "## 📋 Recommendations" >> quality-summary.md
        echo "" >> quality-summary.md
        
        if [[ "${{ needs.complexity-analysis.result }}" != "success" ]]; then
          echo "- 🔄 **Reduce code complexity**: Consider refactoring complex functions" >> quality-summary.md
        fi
        
        if [[ "${{ needs.code-coverage.result }}" != "success" ]]; then
          echo "- 🧪 **Improve test coverage**: Add more comprehensive tests" >> quality-summary.md
        fi
        
        if [[ "${{ needs.documentation-quality.result }}" != "success" ]]; then
          echo "- 📝 **Enhance documentation**: Add missing docstrings and improve documentation quality" >> quality-summary.md
        fi
        
        if [[ "${{ needs.type-coverage.result }}" != "success" ]]; then
          echo "- 🏷️ **Add type hints**: Improve type annotations for better code clarity" >> quality-summary.md
        fi
        
        echo "" >> quality-summary.md
        echo "---" >> quality-summary.md
        echo "*This report was automatically generated by the Code Quality workflow.*" >> quality-summary.md
    
    - name: Comment quality summary on PR
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const qualitySummary = fs.readFileSync('quality-summary.md', 'utf8');
          
          // Find existing quality comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('📊 Code Quality Summary')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: qualitySummary
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: qualitySummary
            });
          }
